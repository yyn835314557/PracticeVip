// 终端中 将 .less 转化为 .css 并且压缩
// $ lessc styles.less styles.css
// $ lessc --clean-css styles.less style.min.css

// 1. 变量 
// 2. 混合(Mixins): 定义好的class A轻松的引入到另一个class B 中,并可以带参数的调用,类似使用函数一样
// 3. 嵌套 
// 4. 函数和运算 function of addition, subtraction, multiplication, division

// 变量是 "按需加载的"(lazy loaded)的， 因此不必强制在使用之前声明

@color: #4D926F;
@the-border: 1px;
@base-color: #111;
@red: #842210;

#header {
	color: (@base-color * 3);
	border-left: @the-border;
	border-right: (@the-border * 2);
	.rounded-corners;
}
#footer {
	color: (@base-color + #003300);
	border-color: desaturate(@red,10%);
	.rounded-corners(10px);
}
.rounded-corners(@radius:5px){
	-webkit-border-radius: @radius;
	-moz-border-radius: @radius;
	-ms-border-raduis: @radius;
	-o-border-radius: @radius;
	border-radius: (@radius * 2);
}
// embedded
#header{
	h1{
		font-size: 26px;
		font-weight: bold;
	}
	p{
		font-size: 12px;
		a{
			text-decoration:noe;
			&:hover{
				border-width: 1px;
			}
			&:active{
				background-color: blue;
			}
		}
	}
}

// 如果对同一个变量定义两次的话，在当前作用域中最后一次定义的将被使用。这与CSS的机制类似，最后一次定义的值会成为这个属性的值。
@var: 0;
.class1{
	@var: 1;
	.class{
		@var: 2;
		three: @var;
		@var: 3;
	}
	one: @var;
}
// 多参数混合
// 多个参数可以使用分号或者逗号分隔，推荐使用分号分隔，因为逗号有两重含义：它既可以表示混合的参数，也可以表示一个参数中一组值的分隔符。
// 使用分号作为参数分隔符意味着可以将逗号分隔的一组值作为 一个变量处理 。换句话说，如果编译器在混合的定义或者是调用中找到至少一个分号，就会假设参数是使用分号分隔的，所有的逗号都属于参数中的一组值的分隔符。
// 2个参数，每个参数都含有通过逗号分隔的一组值的情况：.name(1, 2, 3; something, else)。
// 3个参数，每个参数只含一个数字的情况：.name(1, 2, 3)。

// 使用一个象征性的分号可以创建一个只含一个参数，但参数包含一组值的混合：.name(1, 2, 3;)。

// 逗号分隔的一组值参数的默认值：.name(@param1: red, blue;)。
// 使用同样的名字和同样数量的参数定义多个混合是合法的。在被调用时，LESS会应用到所有可以应用的混合上。比如你调用混合时只传了一个参数.mixin(green)，那么所有只强制要求一个参数的混合都会被调用：
.mixin(@color) {
    color-1: @color;
}
.mixin(@color; @padding:2) {
    color-2: @color;
    padding-2: @padding;
}
.mixin(@color; @padding; @margin: 2) {
    color-3: @color;
    padding-3: @padding;
    margin: @margin @margin @margin @margin;
}
.some .selector div {
    .mixin(#008000);
}

// @arguments param 包含所有传递进来的参数
.boxShadow(@x:0,@y:0,@blur:1px,@color:#000){ 
 -moz-box-shadow: @arguments; 
 -webkit-box-shadow: @arguments; 
 box-shadow: @arguments; 
} 
 #header { 
.boxShadow(2px,2px,3px,#f36); 
}
// @rest 变量 ,在 min 中不限制参数的数量，可以在变量名后面添加...,表示这里可以使用N个参数
.minxin(@a,@rest...){
	// @rest 表示 @a 之后的参数
	// @argument 表示所有参数
}
// .mixin (...) {        // 接受 0-N 个参数
// .mixin () {           // 不接受任何参数
// .mixin (@a: 1) {      // 接受 0-1 个参数
// .mixin (@a: 1, ...) { // 接受 0-N 个参数
// .mixin (@a, ...) {    // 接受 1-N 个参数

//  !important 关键字
.mixin (@a: 0) {
    border: @a;
    boxer: @a;
}
.unimportant {
    .mixin(1); 
}
.important {
    .mixin(2) !important; 
}
// 匹配模式 与 Guard 表达式: 通过参数值控制 mixin 行为的功能
// .mixin (@s, @color) { ... }

// .class {
//     .mixin(@switch, #888);
// }
.mixin (dark, @color) {
    color: darken(@color, 10%);
}
.mixin (light, @color) {
    color: lighten(@color, 10%);
}
.mixin (@_, @color) {
    display: block;
}
// .mixin (@a) {
//     color: @a;
// }
// .mixin (@a, @b) {
//     color: fade(@a, @b);
// }
@switch: light;

.class {
    .mixin(@switch, #888);
}
// guards 与匹配值或者匹配参数不同，guards 用来匹配表达式(expression), 类似变成函数的用法
// .mixin (@a) when (lightness(@a) >= 50%) {
//     background-color: black;
// }
// .mixin (@a) when (lightness(@a) < 50%) {
//     background-color: white;
// }
// .mixin (@a) {
//     color: @a;
// }
// .class1 { .mixin(#ddd) }
// .class2 { .mixin(#555) }

// .truth (@a) when (@a) { ... }
// .truth (@a) when (@a = true) { ... }
// .class {
// 	.truth(40);
// }

// 几个检查基本类型的函数
	// - iscolor
	// - isnumber
	// - isstring
	// - iskeyword
	// - isurl

// 检查一个值(数字)使用了哪个单位
	// * ispixel
	// * ispercentage
	// * isem
// 使用关键字 and 在 guard 中加入额外条件 或者，使用关键词 not 否定条件；
// .mixin (@a) when (isnumber(@a)) and (@a > 0) { ... }
// .mixin (@b) when not (@b > 0) { ... }


// 嵌套规则: 层叠样式
#header{
	color: black;
	.navigation{
		font-size: 12px;
	}
	.logo{
		width: 300px;
		&:hover{
			text-decoration: none;
		}
	}
}
// 注意 & 符号的使用 — 如果你想写串联选择器(作用在同一个标签上 )，而不是写后代选择器(作用在不同标签上 )，就可以用到 & 了。这点对伪类尤其有用如 :hover 和 :focus。
// 嵌套 Media Queries
.one {
	@media (width: 400px){
		font-size: 1.2em;
		@media print and color{
			color: blue;
		}
	}
}